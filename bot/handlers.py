import logging
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ReplyKeyboard
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from bot.database import get_db
from bot.models import Owner, FunPayAccount, Account, Transaction
from bot.utils import encrypt_data, is_user_subscribed, funpay_creds_required, add_subscription_days, decrypt_data
from bot.config import TELEGRAM_BOT_TOKEN, SUBSCRIPTION_PLANS, MIN_TOPUP_AMOUNT, YOOKASSA_ENABLED
from datetime import datetime, timedelta
import uuid

try:
    from yookassa import Payment
    YOOKASSA_SDK_AVAILABLE = True
except ImportError:
    Payment = None
    YOOKASSA_SDK_AVAILABLE = False

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã ---
def subscription_required(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not is_user_subscribed(user_id):
            msg = "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
            if update.message:
                await update.message.reply_text(msg)
            elif update.callback_query:
                await update.callback_query.message.reply_text(msg)
            return
        return await func(update, context)
    return wrapper

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    db_gen = get_db()
    db = next(db_gen)
    owner = db.query(Owner).filter(Owner.tg_id == user_id).first()
    if not owner:
        new_owner = Owner(tg_id=user_id)
        db.add(new_owner)
        db.commit()
        db.refresh(new_owner)
        db.close()
        welcome_msg = f"–ü—Ä–∏–≤–µ—Ç, {username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å."
    else:
        db.close()
        is_sub = owner.is_subscribed() if owner else False
        if is_sub:
            welcome_msg = f"–ü—Ä–∏–≤–µ—Ç, {username}! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {owner.subscription_end.strftime('%d.%m.%Y %H:%M') if owner.subscription_end else 'N/A'}."
        else:
             welcome_msg = f"–ü—Ä–∏–≤–µ—Ç, {username}! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."

    await update.message.reply_text(welcome_msg)
    await show_main_menu(update, context) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è

# --- –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (Reply Keyboard) ---
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°–æ–∑–¥–∞–µ–º Reply Keyboard
    keyboard = [
        [KeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞"), KeyboardButton("üéÆ –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã FunPay")],
        # [KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")], # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    menu_text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    
    if update.message:
        await update.message.reply_text(menu_text, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text(menu_text, reply_markup=reply_markup)
        # –ò–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ:
        # await update.callback_query.message.edit_text(menu_text, reply_markup=reply_markup)
    
    context.user_data['current_menu'] = 'main'

# --- –ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    db_gen = get_db()
    db = next(db_gen)
    owner = db.query(Owner).filter(Owner.tg_id == user_id).first()
    db.close()
    
    balance_text = f"{owner.balance:.2f}" if owner else "0.00"
    
    # Reply Keyboard –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    keyboard = [
        [KeyboardButton("1 –Ω–µ–¥–µ–ª—è - 50.00 —Ä—É–±."), KeyboardButton("1 –º–µ—Å—è—Ü - 150.00 —Ä—É–±.")],
        [KeyboardButton("3 –º–µ—Å—è—Ü–∞ - 400.00 —Ä—É–±.")],
        [KeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    msg_text = f"üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:*\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: *{balance_text} —Ä—É–±.*"
    
    if update.message:
        await update.message.reply_text(msg_text, parse_mode='Markdown', reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text(msg_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    context.user_data['current_menu'] = 'subscribe'

# --- –ü–æ–∫–∞–∑ –º–µ–Ω—é FunPay –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ---
async def show_funpay_accounts_menu(query_or_update, context):
    user_id = query_or_update.from_user.id if hasattr(query_or_update, 'from_user') else query_or_update.effective_user.id
    
    db_gen = get_db()
    db = next(db_gen)
    owner = db.query(Owner).filter(Owner.tg_id == user_id).first()
    
    # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
    total_steam_accounts = 0
    total_rented_now = 0
    if owner:
        total_steam_accounts = db.query(Account).join(FunPayAccount).filter(
            FunPayAccount.owner_id == owner.id
        ).count()
        total_rented_now = db.query(Account).join(FunPayAccount).filter(
            FunPayAccount.owner_id == owner.id,
            Account.status == 'rented'
        ).count()
    stats_text = (
        f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"  ‚Ä¢ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Steam: {total_steam_accounts}\n"
        f"  ‚Ä¢ –ê—Ä–µ–Ω–¥–æ–≤–∞–Ω–æ —Å–µ–π—á–∞—Å: {total_rented_now}\n\n"
    )
    # -----------------------------
    
    # Reply Keyboard –¥–ª—è —Å–ø–∏—Å–∫–∞ FunPay –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    keyboard = []
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    keyboard.append([KeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")])
    
    if owner and owner.funpay_accounts:
        for fp_acc in owner.funpay_accounts:
            if fp_acc.is_active:
                keyboard.append([KeyboardButton(f"üéÆ {fp_acc.name}")])
    
    keyboard.append([KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç FunPay")])
    keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    full_text = stats_text + "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç FunPay –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    
    if hasattr(query_or_update, 'message') and query_or_update.message:
        await query_or_update.message.reply_text(full_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif hasattr(query_or_update, 'edit_message_text'):
        await query_or_update.edit_message_text(full_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    context.user_data['current_menu'] = 'funpay_list'
    db.close()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è Reply Keyboard) ---
async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ Reply Keyboard."""
    text = update.message.text.strip()
    user_id = update.effective_user.id
    current_menu = context.user_data.get('current_menu', 'main')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –¥–ª—è –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    if context.user_data.get('adding_funpay_step'):
        await process_add_funpay_step(update, context)
        return
    elif context.user_data.get('adding_steam_step'):
        await process_add_steam_step(update, context)
        return
    elif context.user_data.get('awaiting_topup_amount'):
        await topup_amount_handler(update, context)
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
    if current_menu == 'main':
        if text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞":
            await subscribe(update, context)
            return
        elif text == "üéÆ –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã FunPay":
            await show_funpay_accounts_menu(update, context)
            return
        # elif text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        #     await balance(update, context)
        #     return
        # elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        #     await stats(update, context)
        #     return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏ ---
    elif current_menu == 'subscribe':
        if text in ["1 –Ω–µ–¥–µ–ª—è - 50.00 —Ä—É–±.", "1 –º–µ—Å—è—Ü - 150.00 —Ä—É–±.", "3 –º–µ—Å—è—Ü–∞ - 400.00 —Ä—É–±."]:
            plan_map = {
                "1 –Ω–µ–¥–µ–ª—è - 50.00 —Ä—É–±.": "1w",
                "1 –º–µ—Å—è—Ü - 150.00 —Ä—É–±.": "1m",
                "3 –º–µ—Å—è—Ü–∞ - 400.00 —Ä—É–±.": "3m"
            }
            plan_id = plan_map.get(text)
            if plan_id:
                # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                class FakeQuery:
                    def __init__(self, update):
                        self.from_user = update.effective_user
                        self.message = update.message
                    
                    async def edit_message_text(self, text):
                        await self.message.reply_text(text)
                
                fake_query = FakeQuery(update)
                await handle_subscription_purchase(fake_query, user_id, plan_id)
            return
        elif text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
            class FakeQuery:
                def __init__(self, update):
                    self.from_user = update.effective_user
                    self.message = update.message
                
                async def edit_message_text(self, text):
                    await self.message.reply_text(text)
            
            fake_query = FakeQuery(update)
            await handle_topup_request(fake_query, user_id)
            return
        elif text == "üîô –ù–∞–∑–∞–¥":
            await show_main_menu(update, context)
            return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é FunPay –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ---
    elif current_menu == 'funpay_list':
        if text == "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            class FakeQuery:
                def __init__(self, update):
                    self.from_user = update.effective_user
                    self.message = update.message
                
                async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
                    await self.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
            
            fake_query = FakeQuery(update)
            await show_overall_funpay_stats(fake_query, context)
            return
        elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç FunPay":
            class FakeQuery:
                def __init__(self, update):
                    self.from_user = update.effective_user
                    self.message = update.message
                
                async def edit_message_text(self, text):
                    await self.message.reply_text(text)
            
            fake_query = FakeQuery(update)
            await start_add_funpay_account(fake_query, context)
            return
        elif text == "üîô –ù–∞–∑–∞–¥":
            await show_main_menu(update, context)
            return
        elif text.startswith("üéÆ "):
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —ç—Ç–æ "üéÆ <–∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞>"
            fp_account_name = text[3:] # –£–±–∏—Ä–∞–µ–º "üéÆ "
            db_gen = get_db()
            db = next(db_gen)
            owner = db.query(Owner).filter(Owner.tg_id == user_id).first()
            if owner:
                # –ò—â–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                fp_account = None
                for account in owner.funpay_accounts:
                    if account.name == fp_account_name and account.is_active:
                        fp_account = account
                        break
                
                if fp_account:
                    class FakeQuery:
                        def __init__(self, update):
                            self.from_user = update.effective_user
                            self.message = update.message
                        
                        async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
                            await self.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
                    
                    fake_query = FakeQuery(update)
                    await show_funpay_account_details(fake_query, context, fp_account.id)
                else:
                    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∂–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                    available_accounts = [f"{acc.name} (ID: {acc.id})" for acc in owner.funpay_accounts if acc.is_active]
                    debug_msg = f"‚ùå –ê–∫–∫–∞—É–Ω—Ç FunPay '{fp_account_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {', '.join(available_accounts) if available_accounts else '–Ω–µ—Ç'}"
                    await update.message.reply_text(debug_msg)
                db.close()
            else:
                db.close()
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ FunPay –∞–∫–∫–∞—É–Ω—Ç–∞ ---
    elif current_menu.startswith('funpay_detail_'):
        funpay_account_id = int(current_menu.split('_')[-1])
        if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç Steam":
            class FakeQuery:
                def __init__(self, update):
                    self.from_user = update.effective_user
                    self.message = update.message
                
                async def edit_message_text(self, text):
                    await self.message.reply_text(text)
            
            fake_query = FakeQuery(update)
            await start_add_steam_account(fake_query, context, funpay_account_id)
            return
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            class FakeQuery:
                def __init__(self, update):
                    self.from_user = update.effective_user
                    self.message = update.message
                
                async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
                    await self.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
            
            fake_query = FakeQuery(update)
            await show_specific_funpay_stats(fake_query, context, funpay_account_id)
            return
        elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã)")
            return
        elif text == "üîô –ù–∞–∑–∞–¥":
            class FakeQuery:
                def __init__(self, update):
                    self.from_user = update.effective_user
                    self.message = update.message
                
                async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
                    await self.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
            
            fake_query = FakeQuery(update)
            await show_funpay_accounts_menu(fake_query, context)
            return
        elif text.startswith("‚úÖ ") or text.startswith("üéÆ ") or text.startswith("üîí "):
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam
            # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: "<—Å—Ç–∞—Ç—É—Å_–∏–∫–æ–Ω–∫–∞> <–ª–æ–≥–∏–Ω>"
            steam_account_login = text.split(' ', 1)[1]
            db_gen = get_db()
            db = next(db_gen)
            steam_account = db.query(Account).filter(Account.login == steam_account_login).first()
            if steam_account:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam
                await update.message.reply_text(f"–î–µ—Ç–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam {steam_account.login} (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
            else:
                await update.message.reply_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç Steam –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            db.close()
            return

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–æ—à–ª–∞, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def handle_subscription_purchase(query, user_id: int, plan_id: str):
    plan_data = SUBSCRIPTION_PLANS.get(plan_id)
    if not plan_data:
        await query.edit_message_text(text="‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        return
    db_gen = get_db()
    db = next(db_gen)
    owner = db.query(Owner).filter(Owner.tg_id == user_id).first()
    if not owner or owner.balance < plan_data['price']:
        db.close()
        msg = "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤." if owner else "‚ùå –û—à–∏–±–∫–∞: –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω."
        if not owner:
             msg += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start."
        await query.edit_message_text(text=msg)
        return
    owner.balance -= plan_data['price']
    new_end = add_subscription_days(owner, plan_data['duration_days'])
    db.commit()
    db.close()
    success_msg = (
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n"
        f"–¢–∞—Ä–∏—Ñ: {plan_data['duration_days']} –¥–Ω–µ–π\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {new_end.strftime('%d.%m.%Y %H:%M')}\n"
        f"–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {owner.balance:.2f} —Ä—É–±."
    )
    await query.edit_message_text(text=success_msg)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ---
async def handle_topup_request(query, user_id: int):
    if not (YOOKASSA_ENABLED and YOOKASSA_SDK_AVAILABLE):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ edit_message_text
        if hasattr(query, 'edit_message_text') and callable(query.edit_message_text):
            await query.edit_message_text(text="‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        elif hasattr(query, 'message') and hasattr(query.message, 'reply_text'):
            await query.message.reply_text(text="‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        else:
            # Fallback –¥–ª—è fake query –æ–±—ä–µ–∫—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ edit_message_text –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç
            if hasattr(query, 'edit_message_text'):
                # –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º –µ—ë
                if callable(query.edit_message_text):
                    await query.edit_message_text("‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
                else:
                    # –≠—Ç–æ –∞—Ç—Ä–∏–±—É—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º message.reply_text
                    if hasattr(query, 'message') and hasattr(query.message, 'reply_text'):
                        await query.message.reply_text("‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
            else:
                # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if hasattr(query, 'message') and hasattr(query.message, 'reply_text'):
                    await query.message.reply_text("‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ edit_message_text
    if hasattr(query, 'edit_message_text') and callable(query.edit_message_text):
        await query.edit_message_text(text=f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º {MIN_TOPUP_AMOUNT} —Ä—É–±.):")
    elif hasattr(query, 'message') and hasattr(query.message, 'reply_text'):
        await query.message.reply_text(text=f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º {MIN_TOPUP_AMOUNT} —Ä—É–±.):")
    else:
        # Fallback –¥–ª—è fake query –æ–±—ä–µ–∫—Ç–æ–≤
        if hasattr(query, 'edit_message_text'):
            # –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º –µ—ë
            if callable(query.edit_message_text):
                await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º {MIN_TOPUP_AMOUNT} —Ä—É–±.):")
            else:
                # –≠—Ç–æ –∞—Ç—Ä–∏–±—É—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º message.reply_text
                if hasattr(query, 'message') and hasattr(query.message, 'reply_text'):
                    await query.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º {MIN_TOPUP_AMOUNT} —Ä—É–±.):")
        else:
            # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if hasattr(query, 'message') and hasattr(query.message, 'reply_text'):
                await query.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º {MIN_TOPUP_AMOUNT} —Ä—É–±.):")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ user_data
    # –î–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö query –æ–±—ä–µ–∫—Ç–æ–≤
    if hasattr(query, 'message') and hasattr(query.message, 'from_user'):
        query.message._user_id = user_id
        if not hasattr(query.message, '_application'):
            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π application –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è user_data
            class FakeApplication:
                def __init__(self):
                    self.user_data = {}
            query.message._application = FakeApplication()
        if user_id not in query.message._application.user_data:
            query.message._application.user_data[user_id] = {}
        query.message._application.user_data[user_id]['awaiting_topup_amount'] = True
    # –î–ª—è fake query –æ–±—ä–µ–∫—Ç–æ–≤
    elif hasattr(query, 'message') and hasattr(query, 'from_user'):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–∞–ø—Ä—è–º—É—é
        if hasattr(query, '_user_data_storage'):
            query._user_data_storage[user_id] = query._user_data_storage.get(user_id, {})
            query._user_data_storage[user_id]['awaiting_topup_amount'] = True

async def topup_amount_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    awaiting_topup = False
    
    # –°–ø–æ—Å–æ–± 1: —á–µ—Ä–µ–∑ context.user_data (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±)
    if context.user_data.pop('awaiting_topup_amount', False):
        awaiting_topup = True
    # –°–ø–æ—Å–æ–± 2: —á–µ—Ä–µ–∑ application.user_data (–¥–ª—è fake query)
    elif hasattr(update.message, '_application') and hasattr(update.message._application, 'user_data'):
        user_id = update.effective_user.id
        if user_id in update.message._application.user_data:
            awaiting_topup = update.message._application.user_data[user_id].pop('awaiting_topup_amount', False)
    # –°–ø–æ—Å–æ–± 3: —á–µ—Ä–µ–∑ message attributes (–¥–ª—è fake query)
    elif hasattr(update.message, '_user_data_storage'):
        user_id = update.effective_user.id
        if user_id in update.message._user_data_storage:
            awaiting_topup = update.message._user_data_storage[user_id].pop('awaiting_topup_amount', False)
    
    if awaiting_topup:
        user_id = update.effective_user.id
        try:
            amount = float(update.message.text)
            if amount < MIN_TOPUP_AMOUNT:
                await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ {MIN_TOPUP_AMOUNT} —Ä—É–±.")
                return
            amount = round(amount, 2)
            payment_id = str(uuid.uuid4())
            try:
                payment = Payment.create({
                    "amount": { "value": f"{amount:.2f}", "currency": "RUB" },
                    "confirmation": { "type": "redirect", "return_url": f"https://t.me/{context.bot.username}" },
                    "capture": True,
                    "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–æ—Ç–µ '@{context.bot.username}'",
                    "metadata": { "tg_user_id": str(user_id), "internal_payment_id": payment_id },
                })
                payment_link = payment.confirmation.confirmation_url
                if payment_link:
                    keyboard = [[InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_link)]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text(
                        f"üí≥ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} —Ä—É–±.\n"
                        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.\n\n"
                        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                        reply_markup=reply_markup
                    )
                    logging.info(f"[TOPUP] –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ –¥–ª—è {user_id} –Ω–∞ {amount} —Ä—É–±. Payment ID: {payment.id}")
                else:
                    raise Exception("Payment link is None")
            except Exception as e:
                logging.error(f"[TOPUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è {user_id}: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è FunPay –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ---
async def show_overall_funpay_stats(query, context):
    user_id = query.from_user.id
    db_gen = get_db()
    db = next(db_gen)
    owner = db.query(Owner).filter(Owner.tg_id == user_id).first()
    if not owner:
        # await query.answer("–û—à–∏–±–∫–∞!", show_alert=True)
        if hasattr(query, 'message') and hasattr(query.message, 'reply_text'):
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        db.close()
        return
    from sqlalchemy import func
    status_counts = db.query(Account.status, func.count(Account.id)).join(FunPayAccount).filter(FunPayAccount.owner_id == owner.id).group_by(Account.status).all()
    status_text = "\n".join([f"  ‚Ä¢ {status}: {count}" for status, count in status_counts]) or "  ‚Ä¢ –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    stats_message = f"üìà *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n*–ê–∫–∫–∞—É–Ω—Ç—ã Steam:*\n{status_text}\n"
    # Reply Keyboard –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if hasattr(query, 'message') and hasattr(query.message, 'edit_text'):
        try:
            await query.message.edit_text(stats_message, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(stats_message, reply_markup=reply_markup, parse_mode='Markdown')
    elif hasattr(query, 'message') and hasattr(query.message, 'reply_text'):
        await query.message.reply_text(stats_message, reply_markup=reply_markup, parse_mode='Markdown')
    context.user_data['current_menu'] = 'funpay_overall_stats'
    db.close()

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ FunPay ---
async def start_add_funpay_account(query, context):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if hasattr(query, 'message') and hasattr(query.message, 'edit_text'):
        try:
            await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ FunPay (–Ω–∞–ø—Ä–∏–º–µ—Ä, –û—Å–Ω–æ–≤–Ω–æ–π):")
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ FunPay (–Ω–∞–ø—Ä–∏–º–µ—Ä, –û—Å–Ω–æ–≤–Ω–æ–π):")
    elif hasattr(query, 'message') and hasattr(query.message, 'reply_text'):
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ FunPay (–Ω–∞–ø—Ä–∏–º–µ—Ä, –û—Å–Ω–æ–≤–Ω–æ–π):")
    context.user_data['adding_funpay_step'] = 'name'
    context.user_data['new_funpay_data'] = {}

async def process_add_funpay_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('adding_funpay_step'):
        return
    user_id = update.effective_user.id
    text = update.message.text.strip()
    step = context.user_data.get('adding_funpay_step')
    if step == 'name':
        if not text:
            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
        context.user_data['new_funpay_data']['name'] = text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à *FunPay User ID*:", parse_mode='Markdown')
        context.user_data['adding_funpay_step'] = 'user_id'
    elif step == 'user_id':
        if not text.isdigit():
            await update.message.reply_text("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        context.user_data['new_funpay_data']['user_id'] = text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à *FunPay Golden Key*:", parse_mode='Markdown')
        context.user_data['adding_funpay_step'] = 'golden_key'
    elif step == 'golden_key':
        golden_key = text
        db_gen = get_db()
        db = next(db_gen)
        owner = db.query(Owner).filter(Owner.tg_id == user_id).first()
        if not owner:
             await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.")
             db.close()
             return
        try:
            name = context.user_data['new_funpay_data']['name']
            user_id_fp = context.user_data['new_funpay_data']['user_id']
            encrypted_user_id = encrypt_data(user_id_fp)
            encrypted_golden_key = encrypt_data(golden_key)
            new_fp_account = FunPayAccount(
                owner_id=owner.id, name=name,
                user_id_encrypted=encrypted_user_id,
                golden_key_encrypted=encrypted_golden_key,
                is_active=True
            )
            db.add(new_fp_account)
            db.commit()
            db.close()
            await update.message.reply_text("‚úÖ –ê–∫–∫–∞—É–Ω—Ç FunPay —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            context.user_data.clear()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
            fake_update = type('', (), {})()
            fake_update.effective_user = update.effective_user
            fake_update.message = update.message
            await show_funpay_accounts_menu(fake_update, context)
        except Exception as e:
            db.rollback()
            db.close()
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ FunPay creds –¥–ª—è {user_id}: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            context.user_data.pop('adding_funpay_step', None)
            context.user_data.pop('new_funpay_data', None)

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ FunPay –∞–∫–∫–∞—É–Ω—Ç–∞ ---
async def show_funpay_account_details(query, context, funpay_account_id: int):
    user_id = query.from_user.id
    db_gen = get_db()
    db = next(db_gen)
    fp_account = db.query(FunPayAccount).join(Owner).filter(FunPayAccount.id == funpay_account_id, Owner.tg_id == user_id).first()
    if not fp_account:
        # await query.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        if hasattr(query, 'message') and hasattr(query.message, 'reply_text'):
            await query.message.reply_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        db.close()
        return
    steam_accounts = fp_account.steam_accounts
    total_steam_for_fp = len(steam_accounts)
    rented_for_fp = len([a for a in steam_accounts if a.status == 'rented'])
    text = f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º FunPay: *{fp_account.name}*\n–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if fp_account.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
    text += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:*\n  ‚Ä¢ –í—Å–µ–≥–æ Steam –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_steam_for_fp}\n  ‚Ä¢ –ê—Ä–µ–Ω–¥–æ–≤–∞–Ω–æ —Å–µ–π—á–∞—Å: {rented_for_fp}\n\n"
    text += "*–ê–∫–∫–∞—É–Ω—Ç—ã Steam:*\n"
    
    # Reply Keyboard –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º
    keyboard = []
    for steam_acc in steam_accounts:
        status_icon = {'available': '‚úÖ', 'rented': 'üéÆ', 'blocked': 'üîí'}.get(steam_acc.status, '‚ùì')
        keyboard.append([KeyboardButton(f"{status_icon} {steam_acc.login}")])
    
    keyboard.append([KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç Steam")])
    keyboard.append([KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")])
    keyboard.append([KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")])
    keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if hasattr(query, 'message') and hasattr(query.message, 'edit_text'):
        try:
            await query.message.edit_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    elif hasattr(query, 'message') and hasattr(query.message, 'reply_text'):
        await query.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    context.user_data['current_menu'] = f'funpay_detail_{fp_account.id}'
    db.close()

async def show_specific_funpay_stats(query, context, funpay_account_id: int):
    user_id = query.from_user.id
    db_gen = get_db()
    db = next(db_gen)
    fp_account = db.query(FunPayAccount).join(Owner).filter(FunPayAccount.id == funpay_account_id, Owner.tg_id == user_id).first()
    if not fp_account:
        # await query.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        if hasattr(query, 'message') and hasattr(query.message, 'reply_text'):
            await query.message.reply_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        db.close()
        return
    from sqlalchemy import func
    steam_account_ids = [sa.id for sa in fp_account.steam_accounts]
    status_counts = db.query(Account.status, func.count(Account.id)).filter(Account.id.in_(steam_account_ids)).group_by(Account.status).all()
    status_text = "\n".join([f"  ‚Ä¢ {status}: {count}" for status, count in status_counts]) or "  ‚Ä¢ –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    stats_message = f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ FunPay '{fp_account.name}':*\n\n*–ê–∫–∫–∞—É–Ω—Ç—ã Steam:*\n{status_text}\n"
    
    # Reply Keyboard –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if hasattr(query, 'message') and hasattr(query.message, 'edit_text'):
        try:
            await query.message.edit_text(stats_message, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(stats_message, reply_markup=reply_markup, parse_mode='Markdown')
    elif hasattr(query, 'message') and hasattr(query.message, 'reply_text'):
        await query.message.reply_text(stats_message, reply_markup=reply_markup, parse_mode='Markdown')
    context.user_data['current_menu'] = f'funpay_stats_{funpay_account_id}'
    db.close()

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Steam –∞–∫–∫–∞—É–Ω—Ç–∞ ---
async def start_add_steam_account(query, context, funpay_account_id: int):
    context.user_data['adding_steam_step'] = 'login'
    context.user_data['steam_funpay_account_id'] = funpay_account_id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if hasattr(query, 'message') and hasattr(query.message, 'edit_text'):
        try:
            await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ Steam:")
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ Steam:")
    elif hasattr(query, 'message') and hasattr(query.message, 'reply_text'):
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ Steam:")

async def process_add_steam_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('adding_steam_step'):
        return
    user_id = update.effective_user.id
    text = update.message.text.strip()
    step = context.user_data.get('adding_steam_step')
    if step == 'login':
        context.user_data['new_steam_data'] = {'login': text}
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞ Steam:")
        context.user_data['adding_steam_step'] = 'password'
    elif step == 'password':
        context.user_data['new_steam_data']['password'] = text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ `shared_secret` (base64) –∏–∑ maFile:")
        context.user_data['adding_steam_step'] = 'shared_secret'
    elif step == 'shared_secret':
        context.user_data['new_steam_data']['shared_secret'] = text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã –∑–∞ —á–∞—Å (—Ä—É–±.):")
        context.user_data['adding_steam_step'] = 'price'
    elif step == 'price':
        try:
            price = float(text)
            db_gen = get_db()
            db = next(db_gen)
            funpay_account_id = context.user_data['steam_funpay_account_id']
            fp_account = db.query(FunPayAccount).join(Owner).filter(FunPayAccount.id == funpay_account_id, Owner.tg_id == user_id).first()
            if not fp_account:
                 await update.message.reply_text("–û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç FunPay –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                 db.close()
                 return
            login = context.user_data['new_steam_data']['login']
            if db.query(Account).filter(Account.login == login).first():
                await update.message.reply_text(f"–ê–∫–∫–∞—É–Ω—Ç Steam —Å –ª–æ–≥–∏–Ω–æ–º {login} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                db.close()
                return
            encrypted_password = encrypt_data(context.user_data['new_steam_data']['password'])
            encrypted_shared_secret = encrypt_data(context.user_data['new_steam_data']['shared_secret'])
            new_steam_account = Account(
                owner_id=fp_account.owner_id,
                funpay_account_id=fp_account.id,
                login=login,
                base_password_encrypted=encrypted_password,
                shared_secret_encrypted=encrypted_shared_secret,
                price_per_hour=price,
                status='available'
            )
            db.add(new_steam_account)
            db.commit()
            db.close()
            await update.message.reply_text("‚úÖ –ê–∫–∫–∞—É–Ω—Ç Steam —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            context.user_data.clear()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
            fake_update = type('', (), {})()
            fake_update.effective_user = update.effective_user
            fake_update.message = update.message
            await show_funpay_accounts_menu(fake_update, context)
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ Steam –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è {user_id}: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            context.user_data.pop('adding_steam_step', None)
            context.user_data.pop('steam_funpay_account_id', None)
            context.user_data.pop('new_steam_data', None)

# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ---
async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ ID –∞–¥–º–∏–Ω–æ–≤
    if update.effective_user.id not in [7003032714]:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    db_gen = get_db()
    db = next(db_gen)
    total_owners = db.query(Owner).count()
    total_accounts = db.query(Account).count()
    rented_accounts = db.query(Account).filter(Account.status == 'rented').count()
    db.close()
    stats_message = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n"
        f"- –í—Å–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤: {total_owners}\n"
        f"- –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}\n"
        f"- –ê—Ä–µ–Ω–¥–æ–≤–∞–Ω–æ —Å–µ–π—á–∞—Å: {rented_accounts}\n"
    )
    await update.message.reply_text(stats_message, parse_mode='Markdown')

async def admin_activate_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
     # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ ID –∞–¥–º–∏–Ω–æ–≤
    if update.effective_user.id not in [7003032714]:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    if not context.args or len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_activate_subscription <TG_ID>")
        return
    try:
        target_tg_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå TG ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    db_gen = get_db()
    db = next(db_gen)
    try:
        owner = db.query(Owner).filter(Owner.tg_id == target_tg_id).first()
        if not owner:
            owner = Owner(tg_id=target_tg_id)
            db.add(owner)
            db.flush()
        current_end = owner.subscription_end or datetime.utcnow()
        new_end = current_end + timedelta(days=30) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π
        owner.subscription_end = new_end
        db.commit()
        db.close()
        success_msg = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {target_tg_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {new_end.strftime('%d.%m.%Y %H:%M')}."
        logging.info(f"[ADMIN] {success_msg}")
        await update.message.reply_text(success_msg)
        try:
            bot_instance = context.bot
            if bot_instance:
                await bot_instance.send_message(chat_id=target_tg_id, text=f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –¥–æ {new_end.strftime('%d.%m.%Y %H:%M')}!")
        except Exception as e:
            logging.error(f"[ADMIN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ {target_tg_id}: {e}")
    except Exception as e:
        db.rollback()
        db.close()
        logging.error(f"[ADMIN] –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {target_tg_id}: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å InlineKeyboard) ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "menu_main":
        await show_main_menu(update, context)
        return
    elif data == "menu_subscribe":
        await subscribe(update, context)
        return
    elif data == "menu_funpay_accounts":
        await show_funpay_accounts_menu(query, context)
        return
    elif data.startswith("sub_"):
        plan_id = data.split("_", 1)[1]
        await handle_subscription_purchase(query, query.from_user.id, plan_id)
        return
    elif data == "topup":
        await handle_topup_request(query, query.from_user.id)
        return
    elif data == "funpay_overall_stats":
        await show_overall_funpay_stats(query, context)
        return
    elif data == "funpay_add":
        await start_add_funpay_account(query, context)
        return
    elif data.startswith("funpay_view_"):
        funpay_account_id = int(data.split("_")[-1])
        await show_funpay_account_details(query, context, funpay_account_id)
        return
    elif data.startswith("funpay_stats_"):
        funpay_account_id = int(data.split("_")[-1])
        await show_specific_funpay_stats(query, context, funpay_account_id)
        return
    elif data.startswith("funpay_steam_add_"):
        funpay_account_id = int(data.split("_")[-1])
        await start_add_steam_account(query, context, funpay_account_id)
        return
    elif data == "funpay_back_to_list":
        await show_funpay_accounts_menu(query, context)
        return
    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
