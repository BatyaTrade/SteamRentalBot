# bot/scheduler.py
import logging
from datetime import datetime
import asyncio
from bot.database import get_db
from bot.models import Account
from bot.steam_api import change_password
from bot.utils import generate_secure_password, decrypt_data
from bot.bot import get_bot_instance

async def notify_owner(owner_tg_id: int, message: str):
    bot_instance = get_bot_instance()
    if bot_instance:
        try:
            await bot_instance.send_message(chat_id=owner_tg_id, text=message)
            logging.info(f"[SCHEDULER NOTIFY] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_tg_id}.")
        except Exception as e:
            logging.error(f"[SCHEDULER NOTIFY] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_tg_id}: {e}")

async def check_expired_rentals(app=None):
    logging.info("[SCHEDULER] –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∞—Ä–µ–Ω–¥...")
    try:
        db_gen = get_db()
        db = next(db_gen)
        now = datetime.utcnow()
        expired_accounts = db.query(Account).filter(
            Account.status == 'rented',
            Account.rent_end_time < now
        ).all()

        if not expired_accounts:
            logging.info("[SCHEDULER] –ù–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö –∞—Ä–µ–Ω–¥.")
            db.close()
            return

        logging.info(f"[SCHEDULER] –ù–∞–π–¥–µ–Ω–æ {len(expired_accounts)} –∏—Å—Ç–µ–∫—à–∏—Ö –∞—Ä–µ–Ω–¥.")

        for account in expired_accounts:
            try:
                logging.info(f"[SCHEDULER] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {account.login} (ID: {account.id})...")
                new_password = generate_secure_password()
                owner_tg_id = account.owner.tg_id
                old_temp_password = account.current_password or decrypt_data(account.base_password_encrypted)

                await notify_owner(owner_tg_id, f"üîÑ –ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –∞–∫–∫–∞—É–Ω—Ç–∞ {account.login}...")

                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                change_result = loop.run_until_complete(
                    change_password(account.login, old_temp_password, new_password, owner_tg_id)
                )
                loop.close()

                if not change_result:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.login} –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã."
                    logging.error(f"[SCHEDULER] {error_msg}")
                    await notify_owner(owner_tg_id, error_msg)
                    continue

                account.status = "available"
                account.current_password = None
                account.renter_username = None
                account.rent_end_time = None
                db.commit()
                success_msg = f"‚úÖ –ê—Ä–µ–Ω–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.login} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
                logging.info(f"[SCHEDULER] {success_msg}")
                await notify_owner(owner_tg_id, success_msg)

            except Exception as e:
                logging.error(f"[SCHEDULER] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {account.login} (ID: {account.id}): {e}", exc_info=True)
                await notify_owner(owner_tg_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã {account.login}.")

        db.close()
        logging.info("[SCHEDULER] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∞—Ä–µ–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    except Exception as e:
        logging.critical(f"[SCHEDULER] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)